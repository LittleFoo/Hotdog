//
// /********************************************************
// * 
// *　　　　　　Copyright (c) 2015  Feiyu
// *  
// * Author		: Binglei Gong</br>
// * Date		: 15-12-9上11:57</br>
// * Declare	: </br>
// * Version	: 1.0.0</br>
// * Summary	: create</br>
// *
// *
// *******************************************************/
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System.Collections;

namespace common
{
	public class InputManager:ITimerEvent
	{
		public delegate void OnInput(InputEventType e, RaycastHit hit);
		private Dictionary<InputEventType, List<OnInput>> listeners = new Dictionary<InputEventType, List<OnInput> >();
		private static InputManager _instance;
		public static InputManager instance
		{
			get
			{
				if(_instance == null) 
					_instance = new InputManager();
				return _instance;
			}
		}

		public void init()
		{
		}

		public InputManager()
		{
			if(_instance != null)
				throw new System.Exception("InputManager is a singleton");

		}

		public void addEventListener (InputEventType e, OnInput item)
		{
			List<OnInput> list;
			if(listeners.TryGetValue(e, out list))
			{
				if(list.Contains(item))
					return;
			}
			else
			{
				list = new List<OnInput>();
				listeners.Add(e, list);
			}

			list.Add(item);
		}

		public void onUpdate ()
		{
			Ray ray;
			RaycastHit hit;
			List<OnInput> list;
			#if UNITY_EDITOR
			if(Input.GetMouseButtonDown(0))
			{
				ray = Camera.main.ScreenPointToRay(Input.mousePosition);
				if(Physics.Raycast(ray, out hit))
				{
					if(listeners.TryGetValue(InputEventType.DOWN, out list))
					{
						for(int i = 0 ; i < list.Count; i++)
						{
							list[i](InputEventType.DOWN, hit);
						}
					}
				}
			}
			else if(Input.GetMouseButtonUp(0))
			{
				ray = Camera.main.ScreenPointToRay(Input.mousePosition);
				if(Physics.Raycast(ray, out hit))
				{
					if(listeners.TryGetValue(InputEventType.UP, out list))
					{
						for(int i = 0 ; i < list.Count; i++)
						{
							list[i](InputEventType.UP, hit);
						}
					}
				}
			}
			#else
			if(Input.touchCount > 0)
			{
				ray = Camera.main.ScreenPointToRay(Input.mousePosition);
				if(Physics.Raycast(ray, out hit))
				{
					if(Input.GetTouch(0).phase == TouchPhase.Began)
					{
						if(listeners.TryGetValue(InputEventType.DOWN, out list))
						{
							for(int i = 0; i < list.Count; i++)
							{
								list[i](InputEventType.DOWN, hit);
							}
						}
					}
					else if(Input.GetTouch(0).phase == TouchPhase.Ended)
					{
						if(listeners.TryGetValue(InputEventType.UP, out list))
						{
							for(int i = 0; i < list.Count; i++)
							{
								list[i](InputEventType.DOWN, hit);
							}
						}
					}
				}
			}
			#endif
		}
	}

	public enum InputEventType
	{
		DOWN,
		UP
	}
}

